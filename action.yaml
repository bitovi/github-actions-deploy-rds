name: 'Deploy Amazon RDS DB instance'
description: 'Deploys an AWS RDS database (Postgres, MySQL, MariaDB or MSSQL)'
branding:
  icon: upload-cloud
  color: red
inputs:
  bitops_code_only:
    description: 'Will run only the generation phase of BitOps, where the Terraform and Ansible code is built.'
    required: false
  bitops_code_store:
    description: 'Store BitOps code as a GitHub artifact'
    required: false
    default: false

  # AWS
  aws_access_key_id:
    description: 'AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: true
  aws_session_token:
    description: 'AWS session token'
    required: false
  aws_default_region:
    description: 'AWS default region'
    required: false
    default: us-east-1
  aws_resource_identifier:
    description: 'Set to override the AWS resource identifier for the deployment.  Defaults to `${org}-{repo}-{branch}`.  Use with destroy to destroy specific resources.'
    required: false
  aws_additional_tags:
    description: 'A JSON object of additional tags that will be included on created resources. Example: `{"key1": "value1", "key2": "value2"}`'
    required: false

  # Terraform
  tf_stack_destroy:
    description: 'Set to "true" to Destroy the stack through Terraform.'
    required: false
  tf_state_file_name:
    description: 'Change this to be anything you want to. Careful to be consistent here. A missing file could trigger recreation, or stepping over destruction of non-defined objects.'
    required: false
  tf_state_file_name_append:
    description: 'Append a string to the tf-state-file. Setting this to `unique` will generate `tf-state-aws-unique`. Can co-exist with the tf_state_file_name variable. '
    required: false
  tf_state_bucket:
    description: 'AWS S3 bucket to use for Terraform state. Defaults to `${org}-${repo}-{branch}-tf-state`'
    required: false
  tf_state_bucket_destroy:
    description: 'Force purge and deletion of S3 bucket defined. Any file contained there will be destroyed. `tf_stack_destroy` must also be `true`'
    required: false
  
  # AWS RDS
  aws_rds_db_enable:
    description: 'Set to true to enable an RDS DB.'
    required: false
    default: true
  aws_rds_db_proxy:
    description: 'Set to true to add a RDS DB Proxy'
    required: false
  aws_rds_db_identifier:
    description: 'Database identifier that will appear in the AWS Console. Defaults to aws_resource_identifier if none set.'
    required: false
  aws_rds_db_name:
    description: 'The name of the database to create when the DB instance is created.'
    required: false
  aws_rds_db_user:
    description: 'Username for the db. Defaults to dbuser.'
    required: false
  aws_rds_db_engine:
    description: 'Which Database engine to use. Default is postgres'
    required: false
  aws_rds_db_engine_version:
    description: 'Which Database engine version to use.'
    required: false
  aws_rds_db_ca_cert_identifier:
    description: 'Certificate to use with the database. Defaults to rds-ca-ecc384-g1'
    required: false
  aws_rds_db_security_group_name:
    description: 'The name of the database security group. Defaults to SG for aws_resource_identifier - RDS.'
    required: false
  aws_rds_db_allowed_security_groups:
    description: 'Comma separated list of security groups to add to the DB SG'
    required: false
  aws_rds_db_ingress_allow_all:
    description: 'Allow incoming traffic from 0.0.0.0/0.'
    required: false
  aws_rds_db_publicly_accessible:
    description: 'Allow the database to be publicly accessible.'
    required: false
  aws_rds_db_port:
    description: 'Port where the DB listens to.'
    required: false
  aws_rds_db_subnets:
    description: 'Specify which subnets to use as a list of strings. '
    required: false
  aws_rds_db_allocated_storage:
    description: 'Storage size. Defaults to 10.'
    required: false
  aws_rds_db_max_allocated_storage:
    description: 'Max storage size. Defaults to 0 to disable auto-scaling.'
    required: false
  aws_rds_db_storage_encrypted:
    description: 'Toggle storage encryption. Defaults to false.'
    required: false
  aws_rds_db_storage_type:
    description: 'Storage type. Like gp2 / gp3. Defaults to gp2.'
    required: false
  aws_rds_db_kms_key_id:
    description: 'The ARN for the KMS encryption key.'
    required: false
  aws_rds_db_instance_class:
    description: 'DB instance server type. Defaults to db.t3.micro.'
    required: false
  aws_rds_db_final_snapshot:
    description: 'Generates a snapshot of the database before deletion.'
    required: false
  aws_rds_db_restore_snapshot_identifier:
    description: 'Name of the snapshot to restore the database from.'
    required: false
  aws_rds_db_cloudwatch_logs_exports:
    description: 'Set of log types to enable for exporting to CloudWatch logs.'
    required: false
  aws_rds_db_multi_az:
    description: 'Specifies if the RDS instance is multi-AZ'
    required: false
  aws_rds_db_maintenance_window:
    description: 'The window to perform maintenance in. Eg: Mon:00:00-Mon:03:00 '
    required: false
  aws_rds_db_apply_immediately:
    description: 'Specifies whether any database modifications are applied immediately, or during the next maintenance window'
    required: false
  aws_rds_db_performance_insights_enable:
    description: 'Enables performance insights for the database. Defaults to false.'
    required: false
  aws_rds_db_performance_insights_retention:
    description: 'Number of days to retain performance insights data. Defaults to 7.'
    required: false
  aws_rds_db_performance_insights_kms_key_id:
    description: 'KMS key ID to use for encrypting performance insights data.'
    required: false
  aws_rds_db_insights_mode:
    description: 'The mode for Performance Insights.'
    required: false
  aws_rds_db_allow_major_version_upgrade:
    description: 'Indicates that major version upgrades are allowed.'
    required: false
  aws_rds_db_auto_minor_version_upgrade:
    description: 'Indicates that minor version upgrades are allowed.'
    required: false
  aws_rds_db_backup_retention_period:
    description: 'The number of days to retain backups for. Must be between 0 (disabled) and 35.'
    required: false
  aws_rds_db_backup_window:
    description: 'The window during which backups are taken.'
    required: false
  aws_rds_db_copy_tags_to_snapshot:
    description: 'Indicates whether to copy tags to snapshots.'
    required: false
  aws_rds_db_additional_tags:
    description: 'A JSON object of additional tags that will be included on created resources. Example: `{"key1": "value1", "key2": "value2"}`'
    required: false
    
  # RDS Proxy
  aws_db_proxy_name:
    description: 'DB Proxy name'
    required: false
  aws_db_proxy_client_password_auth_type:
    description: 'Auth type to use, will use the following, depending on DB the family. MYSQL_NATIVE_PASSWORD, POSTGRES_SCRAM_SHA_256, and SQL_SERVER_AUTHENTICATION'
    required: false
  aws_db_proxy_tls:
    description: 'Toggle TLS enforcement for connection'
    required: false
  aws_db_proxy_security_group_name:
    description: 'Name for the proxy security group. Default to aws_resource_identifier if none.'
    required: false
  aws_db_proxy_database_security_group_allow:
    description: 'Will add an incoming rule from every security group associated with the DB'
    required: false
  aws_db_proxy_allowed_security_group:
    description: 'Comma separated list of SG Ids to add.'
    required: false
  aws_db_proxy_allow_all_incoming:
    description: 'Allow all incoming traffic to the DB Proxy. Mind that the proxy is only available from the internal network except manually exposed.'
    required: false
  aws_db_proxy_cloudwatch_enable:
    description: 'Toggle Cloudwatch logs. Will be stored in /aws/rds/proxy/rds_proxy.name'
    required: false
  aws_db_proxy_cloudwatch_retention_days:
    description: 'Number of days to retain logs'
    required: false
  aws_db_proxy_additional_tags:
    description: 'A list of strings that will be added to created resources'
    required: false

  # AWS VPC Inputs
  aws_vpc_create:
    description: 'Define if a VPC should be created'
    required: false
  aws_vpc_name:
    description: 'Set a specific name for the VPC'
    required: false
  aws_vpc_cidr_block:
    description: 'Define Base CIDR block which is divided into subnet CIDR blocks. Defaults to 10.0.0.0/16.'
    required: false
  aws_vpc_public_subnets:
    description: 'Comma separated list of public subnets. Defaults to 10.10.110.0/24'
    required: false
  aws_vpc_private_subnets:
    description: 'Comma separated list of private subnets. If none, none will be created.'
    required: false
  aws_vpc_availability_zones:
    description: 'Comma separated list of availability zones. Defaults to `aws_default_region`.'
    required: false
  aws_vpc_id:
    description: 'AWS VPC ID. Accepts `vpc-###` values.'
    required: false
  aws_vpc_subnet_id:
    description: 'Specify a Subnet to be used with the instance. If none provided, will pick one.'
    required: false
  aws_vpc_enable_nat_gateway:
    description: 'Enables NAT gateway'
    required: false
  aws_vpc_single_nat_gateway:
    description: 'Creates only one NAT gateway'
    required: false
  aws_vpc_external_nat_ip_ids:
    description: 'Comma separated list of IP IDS to reuse in the NAT gateways'
    required: false
  aws_vpc_additional_tags:
    description: 'A JSON object of additional tags that will be included on created resources. Example: `{"key1": "value1", "key2": "value2"}`'
    required: false

outputs:
  aws_vpc_id:
    description: "The selected VPC ID used."
    value: ${{ steps.deploy.outputs.aws_vpc_id }}
  db_endpoint:
    description: "RDS Endpoint"
    value: ${{ steps.deploy.outputs.db_endpoint }}
  db_secret_details_name:
    description: "AWS Secret name containing db credentials"
    value: ${{ steps.deploy.outputs.db_secret_details_name }}
  db_sg_id:
    description: "SG ID for the RDS instance"
    value: ${{ steps.deploy.outputs.db_sg_id }}
  db_proxy_rds_endpoint:
    description: "Database proxy endpoint"
    value: ${{ steps.deploy.outputs.db_proxy_rds_endpoint }}
  db_proxy_secret_name_rds:
    description: "AWS Secret name containing proxy credentials"
    value: ${{ steps.deploy.outputs.db_proxy_secret_name_rds }}
  db_proxy_sg_id_rds:
    description: "SG ID for the RDS Proxy instance"
    value: ${{ steps.deploy.outputs.db_proxy_sg_id_rds }}

runs:
  using: 'composite'
  steps:
    - name: Deploy with BitOps
      id: deploy
      uses: bitovi/github-actions-commons@add-performance-insights-for-dbs
      with:
        # AWS
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_session_token: ${{ inputs.aws_session_token }}
        aws_default_region: ${{ inputs.aws_default_region }}
        aws_resource_identifier: ${{ inputs.aws_resource_identifier }}
        aws_additional_tags: ${{ inputs.aws_additional_tags }}
        
        # Terraform
        tf_stack_destroy: ${{ inputs.tf_stack_destroy }}
        tf_state_file_name: ${{ inputs.tf_state_file_name }}
        tf_state_file_name_append: ${{ inputs.tf_state_file_name_append }}
        tf_state_bucket: ${{ inputs.tf_state_bucket }}
        tf_state_bucket_destroy: ${{ inputs.tf_state_bucket_destroy }}
        
        # Current repo vars
        bitops_code_only: ${{ inputs.bitops_code_only }}
        bitops_code_store: ${{ inputs.bitops_code_store }}

        # AWS RDS
        aws_rds_db_enable: ${{ inputs.aws_rds_db_enable }}
        aws_rds_db_proxy: ${{ inputs.aws_rds_db_proxy }}
        aws_rds_db_identifier: ${{ inputs.aws_rds_db_identifier }}
        aws_rds_db_name: ${{ inputs.aws_rds_db_name }}
        aws_rds_db_user: ${{ inputs.aws_rds_db_user }}
        aws_rds_db_engine: ${{ inputs.aws_rds_db_engine }}
        aws_rds_db_engine_version: ${{ inputs.aws_rds_db_engine_version }}
        aws_rds_db_ca_cert_identifier: ${{ inputs.aws_rds_db_ca_cert_identifier }}
        aws_rds_db_security_group_name: ${{ inputs.aws_rds_db_security_group_name }}
        aws_rds_db_allowed_security_groups: ${{ inputs.aws_rds_db_allowed_security_groups }}
        aws_rds_db_ingress_allow_all: ${{ inputs.aws_rds_db_ingress_allow_all }}
        aws_rds_db_publicly_accessible: ${{ inputs.aws_rds_db_publicly_accessible }}
        aws_rds_db_port: ${{ inputs.aws_rds_db_port }}
        aws_rds_db_subnets: ${{ inputs.aws_rds_db_subnets }}
        aws_rds_db_allocated_storage: ${{ inputs.aws_rds_db_allocated_storage }}
        aws_rds_db_max_allocated_storage: ${{ inputs.aws_rds_db_max_allocated_storage }}
        aws_rds_db_storage_encrypted: ${{ inputs.aws_rds_db_storage_encrypted }}
        aws_rds_db_storage_type: ${{ inputs.aws_rds_db_storage_type }}
        aws_rds_db_kms_key_id: ${{ inputs.aws_rds_db_kms_key_id }}
        aws_rds_db_instance_class: ${{ inputs.aws_rds_db_instance_class }}
        aws_rds_db_final_snapshot: ${{ inputs.aws_rds_db_final_snapshot }}
        aws_rds_db_restore_snapshot_identifier: ${{ inputs.aws_rds_db_restore_snapshot_identifier }}
        aws_rds_db_cloudwatch_logs_exports: ${{ inputs.aws_rds_db_cloudwatch_logs_exports }}
        aws_rds_db_multi_az: ${{ inputs.aws_rds_db_multi_az }}
        aws_rds_db_maintenance_window: ${{ inputs.aws_rds_db_maintenance_window }}
        aws_rds_db_apply_immediately: ${{ inputs.aws_rds_db_apply_immediately }}
        aws_rds_db_performance_insights_enable: ${{ inputs.aws_rds_db_performance_insights_enable }}
        aws_rds_db_performance_insights_retention: ${{ inputs.aws_rds_db_performance_insights_retention }}
        aws_rds_db_performance_insights_kms_key_id: ${{ inputs.aws_rds_db_performance_insights_kms_key_id }}
        aws_rds_db_insights_mode: ${{ inputs.aws_rds_db_insights_mode }}
        aws_rds_db_allow_major_version_upgrade: ${{ inputs.aws_rds_db_allow_major_version_upgrade }}
        aws_rds_db_auto_minor_version_upgrade: ${{ inputs.aws_rds_db_auto_minor_version_upgrade }}
        aws_rds_db_backup_retention_period: ${{ inputs.aws_rds_db_backup_retention_period }}
        aws_rds_db_backup_window: ${{ inputs.aws_rds_db_backup_window }}
        aws_rds_db_copy_tags_to_snapshot: ${{ inputs.aws_rds_db_copy_tags_to_snapshot }}
        aws_rds_db_additional_tags: ${{ inputs.aws_rds_db_additional_tags }}
        
        # DB Proxy
        aws_db_proxy_name: ${{ inputs.aws_db_proxy_name }}
        aws_db_proxy_client_password_auth_type: ${{ inputs.aws_db_proxy_client_password_auth_type }}
        aws_db_proxy_tls: ${{ inputs.aws_db_proxy_tls }}
        aws_db_proxy_security_group_name: ${{ inputs.aws_db_proxy_security_group_name }}
        aws_db_proxy_database_security_group_allow: ${{ inputs.aws_db_proxy_database_security_group_allow }}
        aws_db_proxy_allowed_security_group: ${{ inputs.aws_db_proxy_allowed_security_group }}
        aws_db_proxy_allow_all_incoming: ${{ inputs.aws_db_proxy_allow_all_incoming }}
        aws_db_proxy_cloudwatch_enable: ${{ inputs.aws_db_proxy_cloudwatch_enable }}
        aws_db_proxy_cloudwatch_retention_days: ${{ inputs.aws_db_proxy_cloudwatch_retention_days }}
        aws_db_proxy_additional_tags: ${{ inputs.aws_db_proxy_additional_tags }}

        # AWS VPC Inputs
        aws_vpc_create: ${{ inputs.aws_vpc_create }}
        aws_vpc_name: ${{ inputs.aws_vpc_name }}
        aws_vpc_cidr_block: ${{ inputs.aws_vpc_cidr_block }}
        aws_vpc_public_subnets: ${{ inputs.aws_vpc_public_subnets }}
        aws_vpc_private_subnets: ${{ inputs.aws_vpc_private_subnets }}
        aws_vpc_availability_zones: ${{ inputs.aws_vpc_availability_zones }}
        aws_vpc_id: ${{ inputs.aws_vpc_id }}
        aws_vpc_subnet_id: ${{ inputs.aws_vpc_subnet_id }}
        aws_vpc_enable_nat_gateway: ${{ inputs.aws_vpc_enable_nat_gateway }}
        aws_vpc_single_nat_gateway: ${{ inputs.aws_vpc_single_nat_gateway }}
        aws_vpc_external_nat_ip_ids: ${{ inputs.aws_vpc_external_nat_ip_ids }}
        aws_vpc_additional_tags: ${{ inputs.aws_vpc_additional_tags }}
